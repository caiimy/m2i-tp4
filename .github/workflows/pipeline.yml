# This is a basic workflow to help you get started with Actions

name: CI TP4

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        options:
          - dev
          - test
          - prod

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull image
      run: | 
        docker pull ${{ secrets.DOCKER_USERNAME }}/myimage:1.0.0

    # - name: Scan image for vulnerabilities
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: '${{ secrets.DOCKER_USERNAME }}/myimage:1.0.0'
    #     format: 'table'
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL'
  
    - name: deploy terraform 
      run: |
        if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
          echo "Deployment in dev"
          cd ./terraform/environments/dev
          terraform init 
          echo " ---------------- PLAN ------------------"
          terraform plan -var-file=./terraform.tfvars
          echo " ---------------- APPLY ------------------"
          terraform apply 
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
          sudo docker run hello-world
        elif [ "${{ github.event.inputs.environment }}" == "test" ]; then   
          echo "eployment in test"
          cd ./terraform/environments/test
          terraform init   
          terraform apply -var-file="terraform.tfvars"
        elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          echo "eployment in prod"
          cd ./terraform/environments/prod
          terraform init 
          terraform apply -var-file="terraform.tfvars"
        fi
    
    # - if: ${{ github.event.inputs.environment }} == "dev"
    #   name: Deploy to dev
    #   uses: hashicorp/terraform-github-actions@master
    #   with: 
    #     tf_actions_version: 0.14.8
    #     tf_actions_subcommand: 'init'
    #     tf_actions_working_dir: './terraform/environments/dev'
    #     args: '-var-file="terraform.tfvars"'
      
    # - if: ${{ github.event.inputs.environment }} == "test"
    #   name: Deploy to test
    #   uses: hashicorp/terraform-github-actions@master
    #   with: 
    #     tf_actions_version: 0.14.8
    #     tf_actions_subcommand: 'init'
    #     tf_actions_working_dir: './terraform/environments/test'
    #     args: '-var-file="terraform.tfvars"'

    # - if: ${{ github.event.inputs.environment }} == "prod"
    #   name: Deploy to prod
    #   uses: hashicorp/terraform-github-actions@master
    #   with: 
    #     tf_actions_version: 0.14.8
    #     tf_actions_subcommand: 'init'
    #     tf_actions_working_dir: './terraform/environments/prod'
    #     args: '-var-file="terraform.tfvars"'
