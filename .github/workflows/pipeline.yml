# This is a basic workflow to help you get started with Actions

name: CI TP4

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  docker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull image
      run: | 
        docker pull ${{ secrets.DOCKER_USERNAME }}/myimage:1.0.0

    - name: Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/myimage:1.0.0'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'
  
    - name: Check environment
      id: check
      run: |
        if [ "${{ github.event.inputs.environment }}" = "dev" ]; then
          echo "::set-output name=env::dev"
        elif [ "${{ github.event.inputs.environment }}" = "test" ]; then   
          echo "::set-output name=env::test"  
        elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
          echo "::set-output name=env::prod"
        else
          echo "Invalid environment"
          exit 1
        fi
    
    if: ${{ steps.check.outputs.env }} = "dev"
      - name: Deploy to ${{ steps.check.outputs.env }}
        uses: hashicorp/terraform-github-actions@master
        with: 
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: './terraform/environments/dev'
    elif: ${{ steps.check.outputs.env }} = "test"
      - name: Deploy to ${{ steps.check.outputs.env }}
        uses: hashicorp/terraform-github-actions@master
        with: 
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: './terraform/environments/test'
    elif: ${{ steps.check.outputs.env }} = "prod"
      - name: Deploy to ${{ steps.check.outputs.env }}
        uses: hashicorp/terraform-github-actions@master
        with: 
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: './terraform/environments/prod'
