# This is a basic workflow to help you get started with Actions

name: CI TP4

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        options:
          - dev
          - test
          - prod

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull image
      run: | 
        docker pull ${{ secrets.DOCKER_USERNAME }}/myimage:1.0.0

    # - name: Scan image for vulnerabilities
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: '${{ secrets.DOCKER_USERNAME }}/myimage:1.0.0'
    #     format: 'table'
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL'

    - name: Generate SSH key
      id: generate_key
      run: |
        ssh-keygen -q -N "" -f id_rsa <<<y >/dev/null 2>&1
        PRIVATE_KEY=$(cat id_rsa)
        PUBLIC_KEY=$(cat id_rsa.pub)        
        echo ::set-output name=private_key::${PRIVATE_KEY}
        echo ::set-output name=public_key::${PUBLIC_KEY}

    - name: Store SSH private key
      run: |        
        echo "${{ steps.generate_key.outputs.private_key }}" > id_rsa
        chmod 600 id_rsa

    - name: configure terraform 
      run: |
        if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
          echo "Deployment in dev"
          #cd ./terraform/environments/dev
          terraform -chdir=./terraform/dev init -var-file=terraform.tfvars
          # echo " ------------------ LS ------------"
          # ls ../../../
          # echo " ---------------- PLAN ------------------"
          # terraform plan -var-file=terraform.tfvars
          # echo " ---------------- APPLY ------------------"
          # terraform apply 
          # terraform destroy
          #sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
          #sudo docker run hello-world
        elif [ "${{ github.event.inputs.environment }}" == "test" ]; then   
          echo "Deployment in test"
          #cd ./terraform/environments/test
          terraform -chdir=./terraform/environments/dev init -var-file=terraform.tfvars   
          terraform apply -var-file="terraform.tfvars"
        elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          echo "Deployment in prod"
          cd ./terraform/environments/prod
          terraform init 
          terraform apply -var-file="terraform.tfvars"
        fi

    - name: Configure Terraform SSH key 
      run: |        
        echo " ---------------- CD -------------------"
        #cd ./terraform/environments/dev
        ls
        terraform -chdir=./terraform/environments/dev import -var-file=terraform.tfvars tls_private_key.github_actions_key "${{ steps.generate_key.outputs.public_key }}" 
    
    - name: Plan terraform
      run: |
        terraform -chdir=./terraform/environments/dev plan -var-file=terraform.tfvars